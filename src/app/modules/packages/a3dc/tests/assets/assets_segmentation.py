import numpy as np


      
input_array_1 = np.array([[0,0,0,0,0,0,0,0,0,0],
                        [0,200,200,200,0,0,0,0,0,0], 
                        [0,200,255,200,0,0,0,0,0,0],
                        [0,200,200,200,0,0,0,0,0,0],
                        [0,0,0,0,0,0,50,50,50,0],
                        [150,150,150,150,150,0,50,100,50,0],
                        [150,50,100,50,150,0,50,50,50,0],
                        [150,100,150,100,150,0,0,0,0,0],
                        [150,50,100,50,150,0,0,255,0,255],
                        [150,150,150,150,150,0,0,0,0,0]],dtype=np.uint16)


input_array_2 = np.array([[[0,0,0,0,0,0,0,0,0,0],
                           [0,200,200,200,0,0,0,0,0,0], 
                           [0,200,255,200,0,0,0,0,0,0],
                           [0,200,200,200,0,0,0,0,0,0],
                           [0,0,0,0,0,0,50,50,50,0],
                           [150,150,150,150,150,0,50,100,50,0],
                           [150,50,100,50,150,0,50,50,50,0],
                           [150,100,150,100,150,0,0,0,0,0],
                           [150,50,100,50,150,0,0,255,0,255],
                           [150,150,150,150,150,0,0,0,0,0]],
                        [[0,0,0,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,0,0,0,0], 
                         [0,0,255,0,0,0,0,0,0,0],
                         [0,0,200,0,0,0,0,0,0,0],
                         [0,0,0,0,0,0,50,50,50,0],
                         [0,0,0,0,150,0,50,100,50,0],
                         [0,50,100,50,0,0,50,50,50,0],
                         [0,100,150,100,0,0,0,0,0,0],
                         [0,50,100,50,0,0,0,255,0,255],
                         [0,0,0,0,150,0,0,0,0,0]]],dtype=np.uint16)

input_array_3 = np.array([[[0,0,0,0,0,0,0,0,0,0],
                           [0,200,200,200,0,0,0,0,0,0], 
                           [0,200,255,200,0,0,0,0,0,0],
                           [0,200,200,200,0,0,0,0,0,0],
                           [0,0,0,0,0,0,50,50,50,0],
                           [150,150,150,150,150,0,50,100,50,0],
                           [150,50,100,50,150,0,50,50,50,0],
                           [150,100,150,100,150,0,0,0,0,0],
                           [150,50,100,50,150,0,0,255,0,255],
                           [150,150,150,150,150,0,0,0,0,0]],
                        [[0,0,0,0,0,0,0,0,0,0],
                           [0,200,200,200,0,0,0,0,0,0], 
                           [0,200,255,200,0,0,0,0,0,0],
                           [0,200,200,200,0,0,0,0,0,0],
                           [0,0,0,0,0,0,50,50,50,0],
                           [150,150,150,150,150,0,50,100,50,0],
                           [150,50,100,50,150,0,50,50,50,0],
                           [150,100,150,100,150,0,0,0,0,0],
                           [150,50,100,50,150,0,0,255,0,255],
                           [150,150,150,150,150,0,0,0,0,0]] ],dtype=np.uint16)


input_array_4 = np.array([[[0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0], 
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0]],
                        [[0,0,0,0,0,0,0,0,0,0],
                           [0,200,200,200,0,0,0,0,0,0], 
                           [0,200,255,200,0,0,0,0,0,0],
                           [0,200,200,200,0,0,0,0,0,0],
                           [0,0,0,0,0,0,50,50,50,0],
                           [150,150,150,150,150,0,50,100,50,0],
                           [150,50,100,50,150,0,50,50,50,0],
                           [150,100,150,100,150,0,0,0,0,0],
                           [150,50,100,50,150,0,0,255,0,255],
                           [150,150,150,150,150,0,0,0,0,0]] ],dtype=np.uint16)


input_array_5 = np.array([[[0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0], 
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0]],
                        [[0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0], 
                           [0,0,255,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,100,0,0],
                           [0,0,0,0,0,0,0,0,0,0],
                           [0,0,150,0,0,0,0,0,0,0],
                           [0,0,0,0,0,0,0,255,0,255],
                           [0,0,0,0,0,0,0,0,0,0]] ],dtype=np.uint16)


input_array_6 = np.array([[[0,0], [5,82]],
                          [[0,200], [15,45]], 
                          [[0,200], [45,70]]], dtype=np.uint16)


###############################################################################
################################tag_image######################################
###############################################################################

        
tag_image_case_1={'input':input_array_1, 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                  [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                                                  [3, 3, 3, 3, 3, 0, 2, 2, 2, 0],
                                                  [3, 3, 3, 3, 3, 0, 2, 2, 2, 0],
                                                  [3, 3, 3, 3, 3, 0, 0, 0, 0, 0],
                                                  [3, 3, 3, 3, 3, 0, 0, 4, 0, 5],
                                                  [3, 3, 3, 3, 3, 0, 0, 0, 0, 0]],dtype=np.uint32)} 


tag_image_case_2={'input':input_array_2, 'result':np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                              [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                              [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                              [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                              [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                                                              [3, 3, 3, 3, 3, 0, 2, 2, 2, 0],
                                                              [3, 3, 3, 3, 3, 0, 2, 2, 2, 0],
                                                              [3, 3, 3, 3, 3, 0, 0, 0, 0, 0],
                                                              [3, 3, 3, 3, 3, 0, 0, 4, 0, 5],
                                                              [3, 3, 3, 3, 3, 0, 0, 0, 0, 0]],

                                                             [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                                              [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                                              [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                                                              [0, 0, 0, 0, 3, 0, 2, 2, 2, 0],
                                                              [0, 3, 3, 3, 0, 0, 2, 2, 2, 0],
                                                              [0, 3, 3, 3, 0, 0, 0, 0, 0, 0],
                                                              [0, 3, 3, 3, 0, 0, 0, 4, 0, 5],
                                                              [0, 0, 0, 0, 3, 0, 0, 0, 0, 0]]],dtype=np.uint32)} 

tag_image_case_list=[tag_image_case_1, tag_image_case_2]
        
###############################################################################
##############################overlap_image####################################
###############################################################################

        
overlap_image_case_1={'input':[input_array_3,input_array_4,input_array_5], 'result':np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],

                                                                               [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                                                                [0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
                                                                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]],dtype=np.uint8)} 


overlap_image_case_2={'input':[input_array_3,input_array_4], 'result':np.array([[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],

                                                                 [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                  [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                  [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                  [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                  [1, 1, 1, 1, 1, 0, 0, 1, 0, 1],
                                                                  [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]]],dtype=np.uint8)} 


overlap_image_case_list=[overlap_image_case_1, overlap_image_case_2]         

###############################################################################
############################threshold_manual###################################
###############################################################################

threshold_manual_case_1={'upper':1, 'lower':0, 'input':input_array_1 ,'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                [1, 1, 1, 1, 1, 0, 0, 1, 0, 1],
                                                [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8)} 


threshold_manual_case_2={'upper':50, 'lower':0,'input':input_array_1 , 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                 [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                 [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                 [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                 [1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
                                                 [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                 [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                 [1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
                                                 [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8)} 

threshold_manual_case_3={'upper':150, 'lower':0,'input':input_array_1 , 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                 [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                 [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                 [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                 [0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
                                                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],dtype=np.uint8)} 

threshold_manual_case_4={'upper':150, 'lower':100,'input':input_array_1 , 'result':np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                                                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                                                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                                                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                                                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                                                    [0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                    [0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
                                                    [0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1]],dtype=np.uint8)} 

threshold_manual_case_list=[threshold_manual_case_1, threshold_manual_case_2, threshold_manual_case_3, threshold_manual_case_4]
    
###############################################################################
#############################threshold_auto####################################
###############################################################################    
        
threshold_auto_case_1={'method':'Otsu', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                  [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                  [1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                                  [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                  [1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
                                                                  [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'result_threshold':50, 'input':input_array_1}

threshold_auto_case_2={'method':'MaxEntropy', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                           [1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
                                                           [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                           [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                           [1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
                                                           [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8),'result_threshold':50, 'input':input_array_1} 

threshold_auto_case_3={'method':'Li', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                           [1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
                                                           [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                           [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                           [1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
                                                           [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8),'result_threshold':54, 'input':input_array_1} 
    

threshold_auto_case_4={'method':'RenyiEntropy', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                           [1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
                                                           [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                           [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                           [1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
                                                           [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'result_threshold':65, 'input':input_array_1}

threshold_auto_case_5={'method':'KittlerIllingworth', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                               [1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
                                                               [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                               [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                               [1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
                                                               [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'result_threshold':61, 'input':input_array_1} 

threshold_auto_case_6={'method':'Yen', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                               [1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
                                                               [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                               [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                               [1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
                                                               [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8),'result_threshold':50, 'input':input_array_1} 




threshold_auto_case_7={'method':'Moments', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                               [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                               [1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                                               [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                               [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                               [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8),'result_threshold':100.0,'input':input_array_1}            

threshold_auto_case_8={'method':'Shanbhag', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                               [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                               [1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                                               [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                               [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                               [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'result_threshold':100,'input':input_array_1} 

threshold_auto_case_9={'method':'IsoData', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                      [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                      [1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                      [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                                      [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                                      [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'result_threshold':100, 'input':input_array_1}     


threshold_auto_case_10={'method':'Huang', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                   [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                   [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                   [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                   [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                   [1, 1, 1, 1, 1, 0, 0, 1, 0, 1],
                                                                   [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'result_threshold':0,'input':input_array_1} 

threshold_auto_case_11={'method':'Triangle', 'mode':'Slice', 'result_array':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                      [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                      [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                      [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                      [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                      [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                      [1, 1, 1, 1, 1, 0, 0, 1, 0, 1],
                                                                      [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8),  'result_threshold':2, 'input':input_array_1} 


threshold_auto_case_12={'method':'Otsu', 'mode':'Slice', 'result_array':np.array([[[0, 0],[0, 0]],
                                                                 [[0, 1],[1, 0]],
                                                                 [[0, 1],[1, 0]]],dtype=np.float64),  'result_threshold':[14.0, 82.0], 'input':input_array_6} 

threshold_auto_case_13={'method':'Otsu', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 0]],
                                                                 [[0, 1],[0, 0]],
                                                                 [[0, 1],[0, 0]]],dtype=np.uint8),  'result_threshold':82, 'input':input_array_6} 



threshold_auto_case_14={'method':'MaxEntropy', 'mode':'Slice', 'result_array':np.array([[[0, 0],[0, 1]],
                                                                        [[0, 1],[1, 0]],
                                                                        [[0, 1],[1, 1]]],dtype=np.float64),  'result_threshold':[5.0, 69.0], 'input':input_array_6} 

threshold_auto_case_15={'method':'MaxEntropy', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 1]],
                                                                 [[0, 1],[0, 1]],
                                                                 [[0, 1],[1, 1]]],dtype=np.uint8),  'result_threshold':44, 'input':input_array_6} 



threshold_auto_case_16={'method':'Li', 'mode':'Slice', 'result_array':np.array([[[0, 0],[0, 0]],
                                                                [[0, 1],[1, 0]],
                                                                [[0, 1],[1, 0]]],dtype=np.float64),  'result_threshold':[9.0, 106.0], 'input':input_array_6} 

threshold_auto_case_17={'method':'Li', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 1]],
                                                                 [[0, 1],[0, 0]],
                                                                 [[0, 1],[0, 1]]],dtype=np.uint8),  'result_threshold':54, 'input':input_array_6} 




threshold_auto_case_18={'method':'RenyiEntropy', 'mode':'Slice', 'result_array':np.array([[[0., 0.],[0., 1.]],
                                                                [[0., 1.],[1., 0.]],
                                                                [[0., 1.],[1., 1.]]],dtype=np.float64),  'result_threshold':[5.0, 58.0], 'input':input_array_6} 

threshold_auto_case_19={'method':'RenyiEntropy', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 1]],
                                                                 [[0, 1],[0, 1]],
                                                                 [[0, 1],[1, 1]]],dtype=np.uint8),  'result_threshold':44, 'input':input_array_6} 




threshold_auto_case_20={'method':'KittlerIllingworth', 'mode':'Slice', 'result_array':np.array([[[False, False],[True, True]],
                                                                [[False, True],[True, True]],
                                                                [[False, True],[True, True]]],dtype=np.bool),  'result_threshold':[0, 0], 'input':input_array_6} 

threshold_auto_case_21={'method':'KittlerIllingworth', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 1]],
                                                                 [[0, 1],[0, 0]],
                                                                 [[0, 1],[0, 1]]],dtype=np.uint8),  'result_threshold':49, 'input':input_array_6}



threshold_auto_case_22={'method':'Yen', 'mode':'Slice', 'result_array':np.array([[[0., 0.],[0., 1.]],
                                                                [[0., 1.],[1., 0.]],
                                                                [[0., 1.],[1., 1.]]],dtype=np.float64),  'result_threshold':[5.0, 69.0], 'input':input_array_6} 

threshold_auto_case_23={'method':'Yen', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 1]],
                                                                 [[0, 1],[0, 1]],
                                                                 [[0, 1],[1, 1]]],dtype=np.uint8),  'result_threshold':44, 'input':input_array_6} 


threshold_auto_case_24={'method':'Moments', 'mode':'Slice', 'result_array':np.array([[[0., 0.],[0., 1.]],
                                                                [[0., 1.],[0., 0.]],
                                                                [[0., 1.],[1., 0.]]],dtype=np.float64),  'result_threshold':[15.0, 81.0], 'input':input_array_6} 

threshold_auto_case_25={'method':'Moments', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 1]],
                                                                 [[0, 1],[0, 0]],
                                                                 [[0, 1],[0, 0]]],dtype=np.uint8),  'result_threshold':81.0, 'input':input_array_6} 

threshold_auto_case_26={'method':'Shanbhag', 'mode':'Slice', 'result_array':np.array([[[0., 0.],[0., 1.]],
                                                                [[0., 1.],[1., 1.]],
                                                                [[0., 1.],[1., 1.]]],dtype=np.float64),  'result_threshold':[5.0, 44.0], 'input':input_array_6} 

threshold_auto_case_27={'method':'Shanbhag', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 1]],
                                                                 [[0, 1],[0, 1]],
                                                                 [[0, 1],[1, 1]]],dtype=np.uint8),  'result_threshold':44.0, 'input':input_array_6} 


threshold_auto_case_28={'method':'IsoData', 'mode':'Slice', 'result_array':np.array([[[0., 0.],[1., 1.]],
                                                                [[0., 1.],[1., 1.]],
                                                                [[0., 1.],[1., 1.]]],dtype=np.float64),  'result_threshold':[1.0, 1.0], 'input':input_array_6} 

threshold_auto_case_29={'method':'IsoData', 'mode':'Stack', 'result_array':np.array([[[0, 0],[1, 1]],
                                                                 [[0, 1],[1, 1]],
                                                                 [[0, 1],[1, 1]]],dtype=np.uint8),  'result_threshold':1.0, 'input':input_array_6} 


threshold_auto_case_30={'method':'Triangle', 'mode':'Slice', 'result_array':np.array([[[0., 0.],[1., 0.]],
                                                                [[0., 1.],[1., 0.]],
                                                                [[0., 1.],[1., 0.]]],dtype=np.float64),  'result_threshold':[0.0, 199.0], 'input':input_array_6} 

threshold_auto_case_31={'method':'Triangle', 'mode':'Stack', 'result_array':np.array([[[0, 0],[1, 1]],
                                                                 [[0, 1],[1, 1]],
                                                                 [[0, 1],[1, 1]]],dtype=np.uint8),  'result_threshold':1.0, 'input':input_array_6} 

threshold_auto_case_32={'method':'Huang', 'mode':'Slice', 'result_array':np.array([[[0., 0.],[0., 0.]],
                                                                [[0., 1.],[1., 0.]],
                                                                [[0., 1.],[1., 0.]]],dtype=np.float64),  'result_threshold':[14.0, 82.0], 'input':input_array_6} 

threshold_auto_case_33={'method':'Huang', 'mode':'Stack', 'result_array':np.array([[[0, 0],[0, 0]],
                                                                 [[0, 1],[0, 0]],
                                                                 [[0, 1],[0, 0]]],dtype=np.uint8),  'result_threshold':82.0, 'input':input_array_6} 


threshold_auto_case_list=[threshold_auto_case_1,threshold_auto_case_2, threshold_auto_case_3, threshold_auto_case_4, threshold_auto_case_5, threshold_auto_case_6,threshold_auto_case_7,threshold_auto_case_8,threshold_auto_case_9, threshold_auto_case_10, threshold_auto_case_11, threshold_auto_case_12, threshold_auto_case_13,threshold_auto_case_14,threshold_auto_case_15, threshold_auto_case_16, threshold_auto_case_17, threshold_auto_case_18, threshold_auto_case_19,threshold_auto_case_20,threshold_auto_case_21, threshold_auto_case_22, threshold_auto_case_23, threshold_auto_case_24, threshold_auto_case_25,threshold_auto_case_26,threshold_auto_case_27, threshold_auto_case_28, threshold_auto_case_29, threshold_auto_case_30, threshold_auto_case_31, threshold_auto_case_32, threshold_auto_case_33]#[case_1,case_2, case_3, case_4, case_5, case_7]#]
                      
###############################################################################
###########################threshold_adaptive##################################
############################################################################### 


threshold_adaptive_case_1={'blocksize':2, 'offset':0, 'method':'Mean', 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                       [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                       [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                       [1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                                                                       [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                                       [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                                       [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'input':input_array_1} 

threshold_adaptive_case_2={'blocksize':5, 'offset':0, 'method':'Mean', 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                       [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                       [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                       [1, 0, 1, 0, 1, 0, 0, 1, 0, 0],
                                                                       [1, 0, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                       [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                                       [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'input':input_array_1}        



threshold_adaptive_case_3={'blocksize':10, 'offset':0, 'method':'Mean', 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                        [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                        [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                        [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                        [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                        [1, 1, 1, 1, 1, 0, 0, 1, 1, 0],
                                                                        [1, 0, 1, 0, 1, 0, 0, 1, 1, 0],
                                                                        [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                        [1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
                                                                        [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'input':input_array_1}

threshold_adaptive_case_4={'blocksize':2, 'offset':0, 'method':'Gaussian', 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                           [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                           [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                           [1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                                                                           [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                                           [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                                           [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'input':input_array_1}         


threshold_adaptive_case_5={'blocksize':5, 'offset':0, 'method':'Gaussian', 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                            [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                                                                            [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                                            [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                                            [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'input':input_array_1}  

threshold_adaptive_case_6={'blocksize':10, 'offset':0, 'method':'Gaussian', 'result':np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                             [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                             [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                             [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                             [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                             [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                             [1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                                                                             [1, 0, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                             [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                                             [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'input':input_array_1}  

threshold_adaptive_case_7={'blocksize':5, 'offset':2, 'method':'Mean', 'result':np.array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
                                                                       [0, 1, 1, 1, 0, 0, 1, 1, 1, 1],
                                                                       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                       [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                       [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                       [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                       [1, 0, 1, 0, 1, 0, 0, 1, 1, 0],
                                                                       [1, 0, 1, 1, 1, 0, 0, 0, 0, 0],
                                                                       [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                                       [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'input':input_array_1} 

threshold_adaptive_case_8={'blocksize':5, 'offset':2, 'method':'Gaussian', 'result':np.array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
                                                                           [0, 1, 1, 1, 0, 0, 1, 1, 1, 1],
                                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 1],
                                                                           [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                                                                           [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],
                                                                           [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
                                                                           [1, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                                                                           [1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                                                           [1, 0, 0, 0, 1, 0, 0, 1, 0, 1],
                                                                           [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]],dtype=np.uint8), 'input':input_array_1}  
    



threshold_adaptive_case_list=[threshold_adaptive_case_1,threshold_adaptive_case_2, threshold_adaptive_case_3, threshold_adaptive_case_4, threshold_adaptive_case_5, threshold_adaptive_case_6, threshold_adaptive_case_7, threshold_adaptive_case_8]
  

        
        
